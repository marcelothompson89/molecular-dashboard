import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from collections import Counter
import re

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Dashboard Similitud Molecular",
    page_icon="üß¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Funci√≥n para cargar datos
@st.cache_data
def load_data():
    try:
        # Cargar ambas hojas del Excel
        moleculas_compartidas = pd.read_excel('Resumen_similitud_moleculas.xlsx', 
                                            sheet_name='Moleculas compartidas')
        moleculas_unicas = pd.read_excel('Resumen_similitud_moleculas.xlsx', 
                                       sheet_name='Moleculas √∫nicas por pa√≠s')
        return moleculas_compartidas, moleculas_unicas
    except Exception as e:
        st.error(f"Error al cargar los datos: {e}")
        return None, None

# Funci√≥n para procesar datos de pa√≠ses
def procesar_paises(df):
    paises_count = {}
    paises_moleculas = {}
    
    for _, row in df.iterrows():
        paises = [p.strip() for p in row['Pa√≠ses'].split(',')]
        molecula = row['Mol√©cula_normalizada']
        
        for pais in paises:
            if pais not in paises_count:
                paises_count[pais] = 0
                paises_moleculas[pais] = []
            paises_count[pais] += 1
            paises_moleculas[pais].append(molecula)
    
    return paises_count, paises_moleculas

# Funci√≥n para crear matriz de similitud
def crear_matriz_similitud(df):
    paises_set = set()
    for _, row in df.iterrows():
        paises = [p.strip() for p in row['Pa√≠ses'].split(',')]
        paises_set.update(paises)
    
    paises_list = sorted(list(paises_set))
    matriz = np.zeros((len(paises_list), len(paises_list)))
    
    for _, row in df.iterrows():
        paises = [p.strip() for p in row['Pa√≠ses'].split(',')]
        for i, pais1 in enumerate(paises_list):
            for j, pais2 in enumerate(paises_list):
                if pais1 in paises and pais2 in paises:
                    matriz[i][j] += 1
    
    return matriz, paises_list

# T√≠tulo principal
st.title("üß¨ Dashboard de Similitud Molecular entre Pa√≠ses")
st.markdown("---")

# Cargar datos
df_compartidas, df_unicas = load_data()

if df_compartidas is not None and df_unicas is not None:
    
    # Sidebar con informaci√≥n general
    st.sidebar.title("üìä Resumen General")
    st.sidebar.metric("Total Mol√©culas Compartidas", len(df_compartidas))
    st.sidebar.metric("Pa√≠ses con Mol√©culas √önicas", len(df_unicas))
    
    # Procesar datos
    paises_count, paises_moleculas = procesar_paises(df_compartidas)
    
    # Layout principal en columnas
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üåç Pa√≠ses con Mayor N√∫mero de Mol√©culas Compartidas")
        
        # Top 15 pa√≠ses
        top_paises = dict(sorted(paises_count.items(), key=lambda x: x[1], reverse=True)[:15])
        
        fig_bar = px.bar(
            x=list(top_paises.values()),
            y=list(top_paises.keys()),
            orientation='h',
            title="N√∫mero de Mol√©culas Compartidas por Pa√≠s",
            labels={'x': 'N√∫mero de Mol√©culas', 'y': 'Pa√≠s'},
            color=list(top_paises.values()),
            color_continuous_scale='viridis'
        )
        fig_bar.update_layout(height=600, showlegend=False)
        st.plotly_chart(fig_bar, use_container_width=True)
    
    with col2:
        st.subheader("üî¨ Mol√©culas √önicas por Pa√≠s")
        
        # Gr√°fico de barras para mol√©culas √∫nicas
        fig_unique = px.bar(
            df_unicas,
            x='Cantidad de mol√©culas √∫nicas',
            y='Pa√≠s',
            orientation='h',
            title="Mol√©culas √önicas",
            color='Cantidad de mol√©culas √∫nicas',
            color_continuous_scale='plasma'
        )
        fig_unique.update_layout(height=400, showlegend=False)
        st.plotly_chart(fig_unique, use_container_width=True)
        
        # Mostrar detalles de mol√©culas √∫nicas
        st.subheader("üìã Detalles de Mol√©culas √önicas")
        pais_seleccionado = st.selectbox(
            "Selecciona un pa√≠s:",
            df_unicas['Pa√≠s'].tolist()
        )
        
        if pais_seleccionado:
            moleculas_pais = df_unicas[df_unicas['Pa√≠s'] == pais_seleccionado]['Mol√©culas √∫nicas'].iloc[0]
            st.text_area(
                f"Mol√©culas √∫nicas de {pais_seleccionado}:",
                moleculas_pais,
                height=150
            )
    
    # Secci√≥n de matriz de similitud
    st.markdown("---")
    st.subheader("üî• Matriz de Similitud Molecular")
    
    # Crear matriz de similitud para los top pa√≠ses
    top_10_paises = list(dict(sorted(paises_count.items(), key=lambda x: x[1], reverse=True)[:10]).keys())
    
    # Calcular similitud entre top pa√≠ses
    matriz_similitud = np.zeros((len(top_10_paises), len(top_10_paises)))
    
    for i, pais1 in enumerate(top_10_paises):
        for j, pais2 in enumerate(top_10_paises):
            if i != j:
                # Contar mol√©culas compartidas entre dos pa√≠ses espec√≠ficos
                compartidas = 0
                for _, row in df_compartidas.iterrows():
                    paises_row = [p.strip() for p in row['Pa√≠ses'].split(',')]
                    if pais1 in paises_row and pais2 in paises_row:
                        compartidas += 1
                matriz_similitud[i][j] = compartidas
            else:
                matriz_similitud[i][j] = paises_count[pais1]
    
    # Heatmap de similitud
    fig_heatmap = px.imshow(
        matriz_similitud,
        x=top_10_paises,
        y=top_10_paises,
        color_continuous_scale='RdYlBu_r',
        title="Mol√©culas Compartidas entre Pa√≠ses (Top 10)",
        aspect="auto"
    )
    fig_heatmap.update_xaxes(side="bottom")
    fig_heatmap.update_layout(height=500)
    st.plotly_chart(fig_heatmap, use_container_width=True)
    
    # An√°lisis de redes
    st.markdown("---")
    st.subheader("üåê An√°lisis de Colaboraci√≥n Molecular")
    
    col3, col4 = st.columns(2)
    
    with col3:
        # Distribuci√≥n del n√∫mero de pa√≠ses por mol√©cula
        paises_por_molecula = [len(row['Pa√≠ses'].split(',')) for _, row in df_compartidas.iterrows()]
        
        fig_dist = px.histogram(
            x=paises_por_molecula,
            nbins=20,
            title="Distribuci√≥n: N√∫mero de Pa√≠ses por Mol√©cula",
            labels={'x': 'N√∫mero de Pa√≠ses', 'y': 'Frecuencia'},
            color_discrete_sequence=['skyblue']
        )
        st.plotly_chart(fig_dist, use_container_width=True)
    
    with col4:
        # Top mol√©culas m√°s compartidas
        st.subheader("üèÜ Top Mol√©culas M√°s Compartidas")
        
        moleculas_mas_compartidas = []
        for _, row in df_compartidas.iterrows():
            num_paises = len(row['Pa√≠ses'].split(','))
            moleculas_mas_compartidas.append({
                'Mol√©cula': row['Mol√©cula_normalizada'][:50] + "..." if len(row['Mol√©cula_normalizada']) > 50 else row['Mol√©cula_normalizada'],
                'N√∫mero de Pa√≠ses': num_paises
            })
        
        df_top_moleculas = pd.DataFrame(moleculas_mas_compartidas)
        df_top_moleculas = df_top_moleculas.sort_values('N√∫mero de Pa√≠ses', ascending=False).head(10)
        
        fig_mol = px.bar(
            df_top_moleculas,
            x='N√∫mero de Pa√≠ses',
            y='Mol√©cula',
            orientation='h',
            title="Top 10 Mol√©culas por N√∫mero de Pa√≠ses",
            color='N√∫mero de Pa√≠ses',
            color_continuous_scale='viridis'
        )
        fig_mol.update_layout(height=400, showlegend=False)
        st.plotly_chart(fig_mol, use_container_width=True)
    
    # Explorador de datos
    st.markdown("---")
    st.subheader("üîç Explorador de Datos")
    
    # Filtros
    col5, col6 = st.columns(2)
    
    with col5:
        pais_filtro = st.selectbox(
            "Filtrar por pa√≠s:",
            ['Todos'] + sorted(list(paises_count.keys()))
        )
    
    with col6:
        min_paises = st.slider(
            "M√≠nimo n√∫mero de pa√≠ses por mol√©cula:",
            min_value=2,
            max_value=max(paises_por_molecula),
            value=2
        )
    
    # Aplicar filtros
    df_filtrado = df_compartidas.copy()
    
    if pais_filtro != 'Todos':
        df_filtrado = df_filtrado[df_filtrado['Pa√≠ses'].str.contains(pais_filtro)]
    
    df_filtrado = df_filtrado[df_filtrado['Pa√≠ses'].apply(lambda x: len(x.split(',')) >= min_paises)]
    
    # Mostrar tabla filtrada
    st.subheader(f"üìã Resultados Filtrados ({len(df_filtrado)} mol√©culas)")
    st.dataframe(df_filtrado, height=300)
    
    # Estad√≠sticas finales
    st.markdown("---")
    st.subheader("üìà Estad√≠sticas Adicionales")
    
    col7, col8, col9, col10 = st.columns(4)
    
    with col7:
        st.metric("Total Pa√≠ses", len(paises_count))
    
    with col8:
        promedio_paises = np.mean(paises_por_molecula)
        st.metric("Promedio Pa√≠ses/Mol√©cula", f"{promedio_paises:.1f}")
    
    with col9:
        max_compartidas = max(paises_por_molecula)
        st.metric("M√°ximo Pa√≠ses por Mol√©cula", max_compartidas)
    
    with col10:
        total_unicas = df_unicas['Cantidad de mol√©culas √∫nicas'].sum()
        st.metric("Total Mol√©culas √önicas", total_unicas)

else:
    st.error("No se pudieron cargar los datos. Aseg√∫rate de que el archivo 'Resumen_similitud_moleculas.xlsx' est√© en el directorio correcto.")
    st.info("El archivo debe contener las hojas: 'Moleculas compartidas' y 'Moleculas √∫nicas por pa√≠s'")

# Footer
st.markdown("---")
st.markdown("*Dashboard creado para an√°lisis de similitud molecular entre pa√≠ses* üß¨")